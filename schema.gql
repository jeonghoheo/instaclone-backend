# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Comment {
  createdAt: DateTime!
  id: Int!
  isMine: Boolean
  payload: String!
  photo: Photo!
  photoId: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

input CreateAccountInput {
  email: String!
  firstName: String!
  lastName: String
  password: String!
  username: String!
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
  user: User
}

type CreateCommentOutput {
  error: String
  ok: Boolean!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input EditPhotoInput {
  caption: String!
  id: Float!
}

type EditPhotoOutput {
  error: String
  ok: Boolean!
}

input EditProfileInput {
  avatar: Upload
  bio: String
  email: String
  firstName: String
  lastName: String
  password: String
  username: String
}

type EditProfileOutput {
  error: String
  ok: Boolean!
}

type FollowUserOutput {
  error: String
  ok: Boolean!
}

type HashTag {
  createdAt: DateTime!
  hashtag: String!
  id: Int!
  photos(page: Float!): [Photo!]
  totalPhotos: Float
  updatedAt: DateTime!
}

input LoginInput {
  password: String!
  username: String!
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  createComment(payload: String!, photoId: Int!): CreateCommentOutput!
  editPhoto(input: EditPhotoInput!): EditPhotoOutput!
  editProfile(input: EditProfileInput!): EditProfileOutput!
  followUser(username: String!): FollowUserOutput!
  login(input: LoginInput!): LoginOutput!
  toggleLike(id: Int!): ToggleLikeOutput!
  unFollowUser(username: String!): UnFollowUserOutput!
  uploadPhoto(input: UploadPhotoInput!): UploadPhotoOutput!
}

type Photo {
  caption: String
  comments: Float
  createdAt: DateTime!
  file: String!
  hashtags: [HashTag!]
  id: Int!
  isMine: Boolean
  likes: Float
  updatedAt: DateTime!
  user: User
  userId: Float!
}

type Query {
  searchPhotos(keyword: String!): SearchPhotosOutput!
  seeFeed: SeeFeedOutput!
  seeFollowers(input: SeeFollowersInput!): SeeFollowersOutput!
  seeFollowing(input: SeeFollowingInupt!): SeeFollowingOutput!
  seeHashtag(hashtag: String!): SeeHashTagOutput!
  seePhoto(id: Float!): SeePhotoOutput!
  seePhotoComments(id: Int!): SeePhotoCommentsOutput!
  seePhotoLikes(id: Int!): SeePhotoLikesOutput!
  seeProfile(username: String!): SeeProfileOutput!
}

type SearchPhotosOutput {
  error: String
  ok: Boolean!
  photos: [Photo!]
}

type SeeFeedOutput {
  error: String
  ok: Boolean!
  photos: [Photo!]
}

input SeeFollowersInput {
  page: Int!
  username: String!
}

type SeeFollowersOutput {
  error: String
  followers: [User!]
  ok: Boolean!
  totalPages: Float
}

input SeeFollowingInupt {
  lastId: Float
  username: String!
}

type SeeFollowingOutput {
  error: String
  following: [User!]
  ok: Boolean!
}

type SeeHashTagOutput {
  error: String
  hashtag: HashTag
  ok: Boolean!
}

type SeePhotoCommentsOutput {
  comments: [Comment!]
  error: String
  ok: Boolean!
}

type SeePhotoLikesOutput {
  error: String
  ok: Boolean!
  users: [User!]
}

type SeePhotoOutput {
  error: String
  ok: Boolean!
  photo: Photo
}

type SeeProfileOutput {
  error: String
  ok: Boolean!
  user: User
}

type ToggleLikeOutput {
  error: String
  ok: Boolean!
}

type UnFollowUserOutput {
  error: String
  ok: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadPhotoInput {
  caption: String!
  file: String!
}

type UploadPhotoOutput {
  error: String
  ok: Boolean!
  photo: Photo
}

type User {
  avatar: String
  bio: String
  createdAt: DateTime!
  email: String!
  firstName: String!
  followers: [User!]
  following: [User!]
  id: Int!
  isFollowing: Boolean!
  isMe: Boolean!
  lastName: String
  photos: [Photo!]
  totalFollowers: Float!
  totalFollowing: Float!
  updatedAt: DateTime!
  username: String!
}
